openapi: 3.0.3
info:
  title: Mysite Polls API
  version: 1.0.0
  description: API for managing and voting on polls in the Mysite project.
paths:
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token/verify/:
    post:
      operationId: api_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /create-question/:
    post:
      operationId: create_question_create
      description: Create a new question with a unique code.
      tags:
      - create-question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
  /questions-list/:
    get:
      operationId: questions_list_retrieve
      description: List of all question
      tags:
      - questions-list
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
  /register/:
    post:
      operationId: register_create
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /results/{code}/:
    get:
      operationId: results_retrieve
      description: Return a list of all choices sorted by vote count
      parameters:
      - in: path
        name: code
        schema:
          type: string
        required: true
      tags:
      - results
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Choice'
          description: ''
  /view-question/{code}/:
    get:
      operationId: view_question_retrieve
      description: Retrieve, update or delete a question by it's unique code along
        with choices.
      parameters:
      - in: path
        name: code
        schema:
          type: string
        required: true
      tags:
      - view-question
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    patch:
      operationId: view_question_partial_update
      description: Retrieve, update or delete a question by it's unique code along
        with choices.
      parameters:
      - in: path
        name: code
        schema:
          type: string
        required: true
      tags:
      - view-question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestion'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    delete:
      operationId: view_question_destroy
      description: Retrieve, update or delete a question by it's unique code along
        with choices.
      parameters:
      - in: path
        name: code
        schema:
          type: string
        required: true
      tags:
      - view-question
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /vote/:
    post:
      operationId: vote_create
      description: Allow users to vote for choice
      tags:
      - vote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
components:
  schemas:
    Choice:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        choice_text:
          type: string
          maxLength: 200
        votes:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      required:
      - choice_text
      - id
    PatchedQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question_text:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          description: Enter a unique 8 Character code
          pattern: ^[a-zA-Z]+$
          maxLength: 8
        published_date:
          type: string
          format: date-time
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
    Question:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question_text:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          description: Enter a unique 8 Character code
          pattern: ^[a-zA-Z]+$
          maxLength: 8
        published_date:
          type: string
          format: date-time
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
      required:
      - choices
      - id
      - question_text
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          maxLength: 128
      required:
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
